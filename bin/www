#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gitapi:server');
var http = require('http');
const https = require('https');
const fs = require('fs');

try{
  const privateKey = fs.readFileSync('/etc/letsencrypt/live/static.220.14.12.49.clients.your-server.de/privkey.pem', 'utf8');
  const certificate = fs.readFileSync('/etc/letsencrypt/live/static.220.14.12.49.clients.your-server.de/cert.pem', 'utf8');
  const ca = fs.readFileSync('/etc/letsencrypt/live/static.220.14.12.49.clients.your-server.de/fullchain.pem', 'utf8');
  const credentials = {
    key: privateKey,
    cert: certificate,
    ca: ca
  };
  
  var server = https.createServer(credentials, app).listen(3000, () => {
    console.log('🚀 HTTPS Server running on port 3000');
    console.log('🔗 https://localhost:3000');
  });
  console.log(credentials);
}catch(error){
  console.log('⚠️  SSL certificates not found, falling back to HTTP');
  console.log('📋 SSL Error:', error.message);
  var server = http.createServer(app).listen(3001, () => {
    console.log('🚀 HTTP Server running on port 3001');
    console.log('🔗 http://localhost:3001');
    console.log('✅ Server is ready to accept requests!');
  });
}






/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */


//

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
